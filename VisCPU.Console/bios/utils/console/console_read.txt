:include "../register_layout.txt"

:data NEWL_KEY 0x01 linker:hide
:data NEWL_CR_KEY 0x01 linker:hide

.console_read ; (Returns value in REG_A)
	COPY CONSOLE_IN_ADDR REG_A
	RET

.console_read_line ; (REG_A = ptr, REG_B = length, REG_B returns readcount)
	COPY REG_A REG_Z
	ADD REG_Z REG_B ; END POSITION
	LOAD NEWL_CR_KEY '\r'
	LOAD NEWL_KEY '\n'

.console_read_line_loop linker:hide
	LOAD REG_Y CONSOLE_IN_ADDR ; Create Pointer From CONSOLE_IN_ADDR
	CREF REG_Y REG_A ; Write Init Value

	DREF REG_A REG_Y

	BEQ REG_Y NEWL_CR_KEY console_read_line_loop ; Ignore \r characters

	BEQ REG_Y NEWL_KEY console_read_line_end ; Check for newline and exit if found

	INC REG_A ; Move Ptr
	
	BLT REG_A REG_Z console_read_line_loop ; Exit Condition

	SUB REG_A REG_B ; Restore SRC Ptr
	RET

.console_read_line_end linker:hide
	SUB REG_Z REG_A ; => Invert Read Bytes
	SUB REG_B REG_Z ; Read Bytes
	SUB REG_A REG_B ; Restore SRC Ptr
	RET

.console_read_buffer ; (REG_A = ptr, REG_B = length)

	COPY REG_A REG_Z
	ADD REG_Z REG_B ; END POSITION
	
	LOAD REG_Y CONSOLE_IN_ADDR ; Create Pointer From CONSOLE_IN_ADDR

.console_read_buffer_loop linker:hide

	CREF REG_Y REG_A ; Write Init Value

	INC REG_A ; Move Ptr

	BLT REG_A REG_Z console_read_buffer_loop ; Exit Condition

	SUB REG_A REG_B ; Restore SRC Ptr

	RET