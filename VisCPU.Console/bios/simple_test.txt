:data A 0x01 ; Creates a label A that points to a data section that is of size 0x01
:data B 0x01
:data C 0x01 ; Counter


.start_execution ; Label for code execution.
	LOAD A 0x00 ; Initialize "variables"
	LOAD B 0x01 
	LOAD C 0x00 


.start_loop

	JSR add_b_onto_a ; Jump to subroutine, (saves current posistion in code and does a JMP)
	JSR print_results ; Ignore this, thats the debug console_write line

	JMP start_loop ; JUMP to the address directly, no subroutine. No way to return back to here



.add_b_onto_a
	ADD A B ; a = a + b
	RET ; Return from subroutine, restores the previous code position+1 to resume execution


.print_results
	LOAD COUT_BUFFER_PTR TEXT_C ; Load the Text we want to Write
	LOAD COUT_BUFFER_LEN TEXT_C_LEN
	JSR console_write_buffer

	LOAD CONSOLE_OUT_NUM_PTR C
	JSR console_write_number

	LOAD COUT_BUFFER_PTR TEXT_A ; Load the Text we want to Write
	LOAD COUT_BUFFER_LEN TEXT_A_LEN
	JSR console_write_buffer

	LOAD CONSOLE_OUT_NUM_PTR A
	JSR console_write_number

	LOAD COUT_BUFFER_PTR TEXT_B ; Load the Text we want to Write
	LOAD COUT_BUFFER_LEN TEXT_B_LEN
	JSR console_write_buffer

	LOAD CONSOLE_OUT_NUM_PTR B
	JSR console_write_number

	LOAD CONSOLE_OUT '\n' ; Newline

	RET

; ___________________  Debugging Code ___________________
:data TEXT_C "Counter: "
:const TEXT_C_LEN 9
:data TEXT_A "; A = "
:const TEXT_A_LEN 6
:data TEXT_B "; B = "
:const TEXT_B_LEN 6

:data CONSOLE_OUT_PTR 0x01
:data CONSOLE_OUT_NUM_PTR 0x01

; Write to CONSOLE_OUT to print a character
:const CONSOLE_OUT 0xFFFF1001 ; Address that the console out "device" is listening to.
:const CONSOLE_OUT_NUM 0xFFFF1002 ; Address that the console out "device" is listening to.


:data COUT_BUFFER_PTR 0x01 ; Ptr to Buffer
:data COUT_BUFFER_LEN 0x01 ; Buffer Length
:data COUT_DEVICE_PTR 0x01 ; Address to the Console Out Interface
:data COUT_BUFFER_END_POS 0x01


.console_write_number ;
	LOAD CONSOLE_OUT_PTR CONSOLE_OUT_NUM ; Create Pointer to Console Out
	CREF CONSOLE_OUT_NUM_PTR CONSOLE_OUT_PTR ; Write Value to Console
	RET

	

.console_write_buffer ; (COUT_BUFFER_PTR = ptr, COUT_BUFFER_LEN = length)
	COPY COUT_BUFFER_PTR COUT_BUFFER_END_POS
	ADD COUT_BUFFER_END_POS COUT_BUFFER_LEN ; END POSITION
	LOAD CONSOLE_OUT_PTR CONSOLE_OUT ; Create Pointer to Console Out



.console_write_buffer_loop

	CREF COUT_BUFFER_PTR CONSOLE_OUT_PTR ; Write Value to Console

	INC COUT_BUFFER_PTR ; Move Ptr

	BLT COUT_BUFFER_PTR COUT_BUFFER_END_POS console_write_buffer_loop ; Exit Condition

	SUB COUT_BUFFER_PTR COUT_BUFFER_LEN ; Restore SRC Ptr

	RET

