; ________________ Includes ________________
:include "D:\Users\Tim\Documents\VisCPU\VisOS\sys\driver\test\test_device.vasm"
; ________________ CONST VALUES ________________
; ________________ VARIABLE FIELDS ________________
:data __str_test_name "IfVar2ArgsTest" linker:hide
:data __str_ret_val_fail "Return value is not5" linker:hide
:data __TestC_arg1 1 linker:hide
:data __TestC_arg2 1 linker:hide
:data __TestC_a 1 linker:hide
:data tmp_649 1 linker:hide
:data tmp_650 1 linker:hide
:data __TestV_arg1 1 linker:hide
:data __TestV_arg2 1 linker:hide
:data tmp_651 1 linker:hide
:data tmp_652 1 linker:hide
:data tmp_653 1 linker:hide
:data tmp_657 1 linker:hide
:data tmp_658 1 linker:hide
:data __IfVar2ArgsTest_a 1 linker:hide
:data __IfVar2ArgsTest_b 1 linker:hide
:data tmp_663 1 linker:hide
; ________________ MAIN PROGRAM CODE ________________
JSR IfVar2ArgsTest
HLT
; ________________ FUNCTION CODE ________________
.TestC linker:hide
POP __TestC_arg2
POP __TestC_arg1
:include "D:\Users\Tim\Documents\VisCPU\VisOS\sys\driver\test\test_device.vasm"
COPY __TestC_arg1 tmp_649
COPY __TestC_arg2 tmp_650
ADD tmp_649 tmp_650; Left: arg1 ; Right: arg2
COPY tmp_649 __TestC_a ; Left: def a ; Right: arg1(OpPlus)arg2
PUSH __TestC_a
RET

.TestV linker:hide
POP __TestV_arg2
POP __TestV_arg1
:include "D:\Users\Tim\Documents\VisCPU\VisOS\sys\driver\test\test_device.vasm"
COPY __TestV_arg1 tmp_651
COPY __TestV_arg2 tmp_652
ADD tmp_651 tmp_652; Left: arg1 ; Right: arg2
PUSH tmp_651
RET

.IfVar2ArgsTest
:include "D:\Users\Tim\Documents\VisCPU\VisOS\sys\driver\test\test_device.vasm"
LOAD tmp_653 __str_test_name
PUSH tmp_653; Push Param ptr_of(str_test_name)
LOAD tmp_653 14
PUSH tmp_653; Push Param size_of(str_test_name)
JSR BeginTest
; Start IF
LOAD tmp_657 2
PUSH tmp_657; Push Param 2
LOAD tmp_657 3
PUSH tmp_657; Push Param 3
JSR TestC
; Write back return value to 'tmp_657'
POP tmp_657
LOAD tmp_658 5
LOAD tmp_653 0
BNE tmp_657 tmp_658 bexpr_eq_659
LOAD tmp_653 1
.bexpr_eq_659 linker:hide
BEZ tmp_653 if_end_654
LOAD tmp_658 3
COPY tmp_658 __IfVar2ArgsTest_a ; Left: def a ; Right: 3
LOAD tmp_657 2
COPY tmp_657 __IfVar2ArgsTest_b ; Left: def b ; Right: 2
; Start IF
PUSH __IfVar2ArgsTest_a; Push Param a
PUSH __IfVar2ArgsTest_b; Push Param b
JSR TestV
; Write back return value to 'tmp_657'
POP tmp_657
LOAD tmp_663 5
LOAD tmp_658 0
BNE tmp_657 tmp_663 bexpr_eq_664
LOAD tmp_658 1
.bexpr_eq_664 linker:hide
BEZ tmp_658 if_end_660
JSR PassTest
RET
JMP if_end_660
.if_end_660 linker:hide
JMP if_end_654
.if_end_654 linker:hide
LOAD tmp_663 __str_ret_val_fail
PUSH tmp_663; Push Param ptr_of(str_ret_val_fail)
LOAD tmp_657 20
PUSH tmp_657; Push Param size_of(str_ret_val_fail)
JSR FailTest
RET

