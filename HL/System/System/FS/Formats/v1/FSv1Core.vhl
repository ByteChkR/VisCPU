#include <FSv1Utils.vhl>
#include <FSv1FileTable.vhl>
#include <FSv1FileStream.vhl>
#include "../../FSCore.vhl"
#include "../../../Console.vhl"
#include "../../../ALLOC/Allocator.vhl"

public class FSv1 : FSCore
{
	private uint m_Partition;
	private uint m_RootFileTable;
	private uint m_Allocator;

	public static FSv1(uint a, uint p)
	{
		this.m_Allocator = a;
		Allocator al = a;
		this.m_Partition = p;
		uint v = this.m_Partition;

		uint ptr = al.Allocate(size_of(FSv1FileTable));
		FSv1FileTable.new(ptr, p, 0);
		this.m_RootFileTable = ptr;
	}

	public uint GetFileTable()
	{
		uint p = this.m_RootFileTable;
		return p;
	}

	private uint FindIndex(string path, uint pathLen)
	{
		FSv1FileTable table = this.m_RootFileTable;
		uint c = table.GetEntryCount();
		for(uint i = 0; i < c; i++)
		{
			if(this.IsName(i, path, pathLen))
			{
				return i;
			}
		}
		interrupt(1); //File not Found
	}

	private uint HasIndex(string path, uint pathLen)
	{
		FSv1FileTable table = this.m_RootFileTable;
		uint c = table.GetEntryCount();
		for(uint i = 0; i < c; i++)
		{
			if(!table.IsDeleted(i) && this.IsName(i, path, pathLen))
			{
				return 1;
			}
		}
		return 0;
	}

	private uint IsName(uint idx, string path, uint pathLen)
	{
		FSv1FileTable table = this.m_RootFileTable;
		uint pl = table.GetEntryNameLength(idx);
		if(pl != pathLen)
		{
			return 0;
		}
		for(uint i = 0; i < pathLen; i++)
		{
			uint v = table.GetEntryName(idx, i);
			uint t = path[i];
			if(v != t)
			{
				return 0;
			}
		}
		return 1;
	}

	public override uint Open(string path, uint pathLen)
	{
		Allocator a = this.m_Allocator;
		uint p = a.Allocate(size_of(FSv1FileStream));
		uint table = this.m_RootFileTable;
		uint idx = this.FindIndex(path, pathLen);
		FSv1FileStream.new(p, idx, table);
		return p;
	}

	public override void Close(uint handle)
	{
		Allocator a = this.m_Allocator;
		a.Free(handle);
	}

	public override uint Create(string path, uint pathLen)
	{
		FSv1FileTable table = this.m_RootFileTable;
		table.CreateEntry(path, pathLen);
		uint v = this.Open(path, pathLen);
		return v;
	}

	public override void Delete(string path, uint pathLen)
	{
		FSv1FileTable table = this.m_RootFileTable;
		table.RemoveEntry(this.FindIndex(path, pathLen));
	}

	public override uint Exists(string path, uint pathLen)
	{
		uint p = this.HasIndex(path, pathLen);
		return p;
	}

	public override uint GetSize(string path, uint pathLen)
	{
		uint idx = this.FindIndex(path, pathLen);
		FSv1FileTable table = this.m_RootFileTable;
		uint s = table.GetEntrySize(idx);
		return s;
	}
}