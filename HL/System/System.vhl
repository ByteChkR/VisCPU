
//System Structures
#include "System/Array.vhl"
#include "System/Colors.vhl"
#include "System/Console.vhl"
#include "System/DeviceLoader.vhl"
#include "System/DeviceTypes.vhl"
#include "System/DiskTable.vhl"
#include "System/Exception.vhl"
#include "System/ExceptionHandler.vhl"
#include "System/List.vhl"
#include "System/LinkedList.vhl"
#include "System/LinkedQueue.vhl"
#include "System/Math.vhl"
#include "System/Partition.vhl"
#include "System/PartitionTable.vhl"
#include "System/Queue.vhl"
#include "System/SIMD/SIMD.vhl"
#include "System/Stack.vhl"
#include "System/String.vhl"
#include "System/Thread.vhl"
#include "System/Time.vhl"

//Allocator Implementation
#include "System/ALLOC/Allocator.vhl"
#include "System/ALLOC/RawAllocator.vhl"


//Device Drivers
#include "System/DEVS/BENCHDRV.vhl"
#include "System/DEVS/MBUSDRV.vhl"
#include "System/DEVS/STOREDRV.vhl"
#include "System/DEVS/TIMEDRV.vhl"

//Custom Exceptions
#include "System/ALLOC/BlockNotMappedException.vhl"
#include "System/ALLOC/OutOfMemoryException.vhl"
#include "System/DEVS/DeviceNotFoundException.vhl"
#include "System/StackEmptyException.vhl"
#include "System/StackOverflowException.vhl"
#include "System/QueueEmptyException.vhl"
#include "System/PartitionTableCorruptedException.vhl"

//Include Global System Library Settings.
#include "System/Settings.vhl"

//Include File System Implementation
#include <System/FS/Formats/v1/FSv1.vhl>

Console.Clear();

SET_ENABLE_THROW_ERRORS(1);
SET_ENABLE_RANGE_CHECK(1);

RawAllocator a = RawAllocator(100000, 100000);
a.SetOptimizationLevel(2);

private PartitionTable Init()
{
	uint dlp = a.Allocate(size_of(DeviceLoader));
	DeviceLoader.new(dlp, DeviceTypes.Drive());
	DeviceLoader dl = dlp;

	uint dp = a.Allocate(size_of(STOREDRV));
	STOREDRV.new(dp, dl.GetNextDevice());

	STOREDRV drive = dp;
	//drive.Write(0,0);

	a.Free(dlp);

	uint ptp = a.Allocate(size_of(PartitionTable));

	PartitionTable.new(ptp, dp, a);

	return ptp;
}

private void FormatData()
{
	for(uint i = 0; i < pData.GetSize(); i++)
	{
		pData.Write(i, 0);
	}
}

private void CreateTest(FileSystem fs)
{
	string sCreate = "Creating Test File...";
	Console.WriteLine(&sCreate, size_of(sCreate));

	FileStream s = fs.Create(&file, size_of(file));

	for(uint i = 0; i < 10; i++)
	{
		s.Write(i); //Write something to allocate a block
	}

	uint sz = s.GetSize();
	Console.WriteNumberLine(sz);
	fs.Close(s);
}

private void OpenTest(FileSystem fs)
{
	string sOpen = "Opening Test File...";
	Console.WriteLine(&sOpen, size_of(sOpen));

	FileStream s = fs.Open(&file, size_of(file));
	string str_fsize = "File Size: ";
	uint fsize = s.GetSize();

	Console.Write(&str_fsize, size_of(str_fsize));
	Console.WriteNumberLine(fsize);

	for(uint i = 0; i < fsize; i++)
	{
		Console.WriteNumberLine(s.Read());
	}

	fs.Close(s); //Close File
}

private void AppendTest(FileSystem fs)
{
	string sAppend = "Appending Test File...";
	Console.WriteLine(&sAppend, size_of(sAppend));

	FileStream s = fs.Open(&file, size_of(file));
	string str_fsize = "File Size: ";
	uint fsize = s.GetSize();

	Console.Write(&str_fsize, size_of(str_fsize));
	Console.WriteNumberLine(fsize);

	uint amount = 100 - fsize;
	s.SetPosition(fsize);
	for(uint i = 0; i < amount; i++)
	{
		s.Write(i);
	}

	fs.Close(s); //Close File
}

//Initialize Disk
PartitionTable pt = Init();
Partition pData = pt.GetPartition(1);

//FormatData();

//Create File System
uint fsfmtp = a.Allocate(size_of(FileSystem));
FileSystem.new(fsfmtp, a, pData);
FileSystem fs = fsfmtp;


string file = "test.txt";

if(fs.Exists(&file, size_of(file)))
{
	uint s = fs.GetSize(&file, size_of(file));
	if(s < 100)
	{
		AppendTest(fs);
	}
	else
	{
		OpenTest(fs);
		string sreset = "Resetting VM to Start State..";
		Console.WriteLine(&sreset, size_of(sreset));
		FormatData();
	}
}
else
{
	CreateTest(fs);
}