private static string dnsLibPath = "0:lib/networking.dns.vbin";

private static string netLibPath = "0:lib/networking.vbin";
private static uint net_adapter_guid;
private static string netGUIDName = "net_adapter_guid";

private static uint net_is_connected;
private static string netIsConnectedName = "net_is_connected";


private static void ResolveNetDependencies()
{
	uint netLib = dlr_load_lib(&netLibPath, size_of(netLibPath));
	net_is_connected = dlr_resolve_call(netLib, &netIsConnectedName, size_of(netIsConnectedName));
	net_adapter_guid = dlr_resolve_call(netLib, &netGUIDName, size_of(netGUIDName));
}


private static void print_network_info()
{
	if(!fs_exists(&netLibPath, size_of(netLibPath)))
	{
		string strNoNetwork = "[KTOOLS] Unable to load Network Library. File does not exist.";
		kprintl(&strNoNetwork, size_of(strNoNetwork));
		return;
	}
	ResolveNetDependencies();

	string strNetworkInfo= "[KTOOLS] Network Info: ";
	kprintl(&strNetworkInfo, size_of(strNetworkInfo));

	string strAdapterGUID = "Adapter GUID: ";
	kprintc('\t');
	kprint(&strAdapterGUID, size_of(strAdapterGUID));
	uint guid = malloc(36);
	net_adapter_guid(guid);
	kprintl(guid, 36);
	free(guid);

	string strAdapterConnected = "Adapter Connected: ";
	kprintc('\t');
	kprint(&strAdapterConnected, size_of(strAdapterConnected));
	kprintnl(net_is_connected());

	string strDNSExists = "Adapter Supports DNS: ";
	uint supportsDns = fs_exists(&dnsLibPath, size_of(dnsLibPath));
	kprintc('\t');
	kprint(&strDNSExists, size_of(strDNSExists));
	kprintnl(supportsDns);
}