#import "link D:\Users\Tim\Documents\viscpu\HL\Kernel\Program.vbin"

#define DNS_DEFAULT_PORT 1095
#define DNS_SERVER_PORT 77
#define DNS_CMD_RESOLVE 1
#define DNS_CMD_REGISTER 2
#define DNS_IP 1

private static string netLibPath = "0:lib/networking.vbin";
private static uint net_connect;
private static string netConnectName = "net_connect";
private static uint net_is_connected;
private static string netIsConnectedName = "net_is_connected";
private static uint net_has_packet;
private static string netHasPackageName = "net_has_packet";
private static uint net_open_port;
private static string netOpenPortName = "net_open_port";
private static uint net_close_port;
private static string netClosePortName = "net_close_port";
private static uint net_packet_size;
private static string netPacketSizeName = "net_packet_size";
private static uint net_packet_data;
private static string netPacketDataName = "net_packet_data";
private static uint net_consume;
private static string netConsumeName = "net_consume";
private static uint net_send;
private static string netSendName = "net_send";
private static uint net_adapter_guid;
private static string netAdapterGUIDName = "net_adapter_guid";

private static void ResolveDependencies()
{
	uint netLib = dlr_load_lib(&netLibPath, size_of(netLibPath));
	net_connect = dlr_resolve_call(netLib, &netConnectName, size_of(netConnectName));
	net_is_connected = dlr_resolve_call(netLib, &netIsConnectedName, size_of(netIsConnectedName));
	net_has_packet = dlr_resolve_call(netLib, &netHasPackageName, size_of(netHasPackageName));
	net_open_port = dlr_resolve_call(netLib, &netOpenPortName, size_of(netOpenPortName));
	net_close_port = dlr_resolve_call(netLib, &netClosePortName, size_of(netClosePortName));
	net_packet_size = dlr_resolve_call(netLib, &netPacketSizeName, size_of(netPacketSizeName));
	net_packet_data = dlr_resolve_call(netLib, &netPacketDataName, size_of(netPacketDataName));
	net_consume = dlr_resolve_call(netLib, &netConsumeName, size_of(netConsumeName));
	net_send = dlr_resolve_call(netLib, &netSendName, size_of(netSendName));
	net_adapter_guid = dlr_resolve_call(netLib, &netAdapterGUIDName, size_of(netAdapterGUIDName));

}

private static uint dns_init()
{
	ResolveDependencies();
	if(!net_is_connected())
	{
		net_connect();
	}
}

private static uint dns_read_response(uint port)
{
	uint cycleCounter = 0;
	while(!net_has_packet(port))
	{
		if(cycleCounter % 10000 == 0)
		{
			kprintc('.');
		}
		if(cycleCounter == 100000)
		{
			kprintc('\n');
			string strConnectionTimeout = "[DNS] Connection Timed Out...";
			kprintl(&strConnectionTimeout, size_of(strConnectionTimeout));
			interrupt(1);
		}

		cycleCounter++;
	}
	kprintc('\n');
	
	uint s = net_packet_size(port);
	if(s != 1)
	{
		string strInvalidPacketLength = "[DNS] Invalid Packet Length";
		kprintl(&strInvalidPacketLength, size_of(strInvalidPacketLength));
		interrupt(1);
	}
	uint ret = 0;
	uint retP = &ret;
	net_packet_data(port, retP);
	net_consume(port);

	if(!ret)
	{
		string strInvalidResponse = "[DNS] Invalid Response";
		kprintl(&strInvalidResponse, size_of(strInvalidResponse));
		interrupt(1);
	}
	return ret;
}



public static uint dns_resolve(uint addr, uint addrL)
{
	dns_init();
	uint packetSize = addrL + 1; 
	uint packetBuf = malloc(packetSize);

	mem_copy(addr, packetBuf + 1, addrL);
	packetBuf[0] = DNS_CMD_RESOLVE;

	net_open_port(DNS_DEFAULT_PORT);
	net_send(DNS_DEFAULT_PORT, DNS_IP, DNS_SERVER_PORT, packetBuf, packetSize);
	

	string strResolveHost = "[DNS] Resolving Host: ";
	kprint(&strResolveHost, size_of(strResolveHost));
	kprintl(packetBuf + 1, addrL);
	free(packetBuf);


	uint ret = dns_read_response(DNS_DEFAULT_PORT);
	net_close_port(DNS_DEFAULT_PORT);

	string strResultAddr = "[DNS] Resolved Address: ";
	kprint(&strResultAddr, size_of(strResultAddr));
	kprintnl(ret);
	return ret;

}

public static uint dns_register(uint addr, uint addrL)
{
	
	dns_init();

	uint packetSize = addrL + 1 + 36; //1x Command, 36x GUID
	uint packetBuf = malloc(packetSize);
	uint guidStart = packetBuf + 1;
	uint nameStart = packetBuf + 1 + 36;

	mem_copy(addr, nameStart, addrL);
	net_adapter_guid(guidStart); //Copy from Adapter Driver directly into package.

	packetBuf[0] = DNS_CMD_REGISTER;

	net_open_port(DNS_DEFAULT_PORT);
	net_send(DNS_DEFAULT_PORT, DNS_IP, DNS_SERVER_PORT, packetBuf, packetSize);
	

	string strResolveHost = "[DNS] Registering Host: ";
	kprint(&strResolveHost, size_of(strResolveHost));
	kprintl(nameStart, addrL);
	free(packetBuf);

	uint ret = dns_read_response(DNS_DEFAULT_PORT);
	net_close_port(DNS_DEFAULT_PORT);

	string strResultAddr = "[DNS] Resolved Address: ";
	kprint(&strResultAddr, size_of(strResultAddr));
	kprintnl(ret);
	return ret;

}
