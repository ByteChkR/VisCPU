#include "hfs_commands.vhl"

// Status IDS
private internal const uint HFS_STATUS_READY = 0x01;
private internal const uint HFS_STATUS_FILE_OPEN = 0x02;

// ADDRESSES
private internal const uint HFS_ADDRESS_PRESENT = 0xFFFF3000;
private internal const uint HFS_ADDRESS_STATUS = 0xFFFF3001;
private internal const uint HFS_ADDRESS_DATA = 0xFFFF3002;
private internal const uint HFS_ADDRESS_CMD = 0xFFFF3003;

public class HFS
{
	public static uint GetStatus()
	{
		uint v = HFS_ADDRESS_PRESENT;
		if(!v)
		{
			return 0;
		}
		v = HFS_ADDRESS_STATUS;
		return v;
	}

	public static uint FileReadByte()
	{
		uint v = HFS_ADDRESS_DATA;
		return v;
	}

	public static void FileWriteByte(uint data)
	{
		HFS_ADDRESS_DATA = data;
		return;
	}

	private static void  SetCommand(uint command)
	{
		uint v = HFS.GetStatus();
		if(!v)
		{
			return;
		}
		HFS_ADDRESS_CMD = command;
		return;
	}

	private static void WriteData(uint data, uint length)
	{
		uint v = HFS.GetStatus();
		if(!v)
		{
			return;
		}
		uint i = 0;
		while(i < length)
		{
			uint d = data[i];
			HFS.FileWriteByte(d);
			i++;
		}
		return;
	}

	private static void ReadData(uint data, uint length)
	{
		uint v = HFS.GetStatus();
		if(!v)
		{
			return;
		}
		uint i = 0;
		while(i < length)
		{
			data[i] = HFS.FileReadByte();
			i++;
		}
		return;
	}


	public static uint GetFileSize(uint path, uint pathLen)
	{
		HFS.WriteData(path, pathLen);
		HFS.SetCommand( HFSCommands.GetFileSize() );
		return HFS.FileReadByte();
	}

	private static void LoadSymbols(uint path, uint pathLen)
	{
		HFS.WriteData(path, pathLen);
		HFS.SetCommand( HFSCommands.LoadSymbols() );
		return;
	}

	public static uint FileExists(uint path, uint pathLen)
	{
		HFS.WriteData(path, pathLen);
		HFS.SetCommand( HFSCommands.FileExists() );
		return HFS.FileReadByte();
	}

	public static void FileOpenRead(uint path, uint pathLen)
	{
		HFS.WriteData(path, pathLen);
		HFS.SetCommand( HFSCommands.OpenRead() );
		return;
	}

	public static void FileOpenWrite(uint path, uint pathLen)
	{
		HFS.WriteData(path, pathLen);
		HFS.SetCommand( HFSCommands.OpenWrite() );
		return;
	}

	public static void FileClose()
	{
		HFS.SetCommand( HFSCommands.Close() );
		return;
	}

	public static void WriteAllData(uint path, uint pathLen, uint data, uint dataLen)
	{
		HFS.WriteData(path, pathLen);
		HFS.SetCommand( HFSCommands.OpenWrite() );
		HFS.WriteData(data, dataLen);
		HFS.SetCommand( HFSCommands.Close() );
		return;
	}

	public static void ChangeDirectory(uint path, uint pathLen)
	{
		HFS.WriteData(path, pathLen);
		HFS.SetCommand( HFSCommands.ChangeDir() );
		return;
	}

	public static void CreateDirectory(uint path, uint pathLen)
	{
		HFS.WriteData(path, pathLen);
		HFS.SetCommand( HFSCommands.MakeDir() );
		return;
	}

	public static void DeleteFile(uint path, uint pathLen)
	{
		HFS.WriteData(path, pathLen);
		HFS.SetCommand( HFSCommands.Delete() );
		return;
	}

	public static void ReadAllData(uint path, uint pathLen, uint data, uint dataLen)
	{
		HFS.FileOpenRead(path, pathLen);
		HFS.ReadData(data, dataLen);
		HFS.SetCommand( HFSCommands.Close() );
		return;
	}
}
