#include "hfs/hfs.vhl"
#include "../MemoryManagement/malloc.vhl"
#include "../DiskManagement/FileSystem/fs.vhl"
#include "../Console.vhl"

//Settings
#include <../Settings/InstallerSettings.vhl>

private static uint kal_read_path(uint ptr, uint max)
{
	uint cur = 0;
	while(cur < max)
	{
		uint v = kread();
		while(v == '\r')
		{
			v = kread();
		}
		if(v == '\n')
		{
			return cur;
		}
		ptr[cur] = v;
		cur++;
	}
	return max;
} 

public static void kal_load_from_hfs(uint libPath, uint pathLen, uint hfsPath, uint hfsLength)
{
	string sTag = "[KAL] Installing: ";

	kprint(&sTag, size_of(sTag));
	kprintl(libPath, pathLen);
	uint existsHfs = HFS.FileExists(hfsPath, hfsLength);
	uint needsFreeBuf = 0;
	if(!existsHfs)
	{
		string strHfsNotExist = "HFS File Does not Exist: ";
		kprint(&strHfsNotExist, size_of(strHfsNotExist));
		kprintl(hfsPath, hfsLength);
		string strReenterPath = "HFS PATH: ";
		kprint(&strReenterPath, size_of(strReenterPath));

		needsFreeBuf = 1;
		uint pBuf = malloc(256);
		uint pLen = kal_read_path(pBuf, 256);
		hfsPath = pBuf;
		hfsLength = pLen;

		existsHfs = HFS.FileExists(hfsPath, hfsLength);
		if(!existsHfs)
		{
			return;
		}
	}
	uint size = HFS.GetFileSize(hfsPath, hfsLength);
	
	uint libFile = 0;
	if(fs_exists(libPath, pathLen))
	{
		libFile = fs_open(libPath, pathLen);
		f_setpos(libFile, 0);
		f_setsize(libFile, 0);
	}
	else
	{
		libFile = fs_create(libPath, pathLen);
	}
	
	if(KAL_INSTALL_SAFE_WRITE)
	{
		HFS.FileOpenRead(hfsPath, hfsLength);

		for(uint i = 0; i < size; i++)
		{
			f_write(libFile, HFS.FileReadByte());
		}

		HFS.FileClose();
	}
	else
	{
		uint libPtr = malloc(size);
		HFS.ReadAllData(hfsPath, hfsLength, libPtr, size);
		f_writebuf(libFile, libPtr, size);
		free(libPtr);
	}
	
	fs_close(libFile);

	if(needsFreeBuf)
	{
		free(hfsPath);
	}
}

public static void kal_inject_from_hfs(string libPath, uint pathLen, string hfsPath, uint hfsLength)
{
	uint existsLib = fs_exists(libPath, pathLen);
	if(!existsLib)
	{
		kal_load_from_hfs(libPath, pathLen, hfsPath, hfsLength);
	}
}

public static void kal_inject_from_memory(string libPath, uint pathLen, uint ptr, uint len)
{
		
	//Inject Test Lib into FS
	uint existsLib = fs_exists(libPath, pathLen);
	if(!existsLib)
	{
		string sLibPatch = "[KAL] Install: ";
		kprint(&sLibPatch, size_of(sLibPatch));
		kprintl(libPath, pathLen);

		uint fstream = fs_create(libPath, pathLen);

		uint v = ptr;
		uint v1 = len;
		uint l = v1 - v;

		if(KAL_INSTALL_SAFE_WRITE)
		{
			string strWriteSafe = "[KAL] Safe Write Enabled";
			kprintl(&strWriteSafe, size_of(strWriteSafe));
			for(uint i = 0; i < l; i++)
			{
				uint val = v[i];
				f_write(fstream ,val);
			}
		}
		else
		{			
			string strWriteUnSafe = "[KAL] Unsafe Write Enabled";
			kprintl(&strWriteUnSafe, size_of(strWriteUnSafe));
			f_writebuf(fstream, v, l);
		}

		fs_close(fstream);
		
	}

}
