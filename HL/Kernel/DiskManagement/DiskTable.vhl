#include "../MemoryManagement/malloc.vhl"
#include "../Utils/LinkedList.vhl"
#include "../Console.vhl"
#include <../Settings/LoggingSettings.vhl>

#include "Utils/DeviceLoader.vhl"
#include "Utils/DeviceTypes.vhl"

#include "Drivers/STOREDRV.vhl"

#include "PartitionTable.vhl"

public class DiskTable
{
	private uint m_List;
	public static DiskTable()
	{

		if(DT_ENABLE_LOGS)
		{
			string strInit = "[DT] Initializing Disk Table";
			kprintl(&strInit, size_of(strInit));
		}

		uint lp = malloc(size_of(LinkedList));
		LinkedList.new(lp);

		this.m_List = lp;
		LinkedList ll = lp;

		if(DT_ENABLE_LOGS)
		{
			string strDiskSearch = "[DT] Searching for Devices..";
			kprintl(&strDiskSearch, size_of(strDiskSearch));
		}


		DeviceLoader ld = DeviceLoader(DeviceTypes.Drive());

		uint device = ld.GetNextDevice();
		uint devCount = 0;
		while(device)
		{
			if(DT_ENABLE_LOGS)
			{
				string strFoundDisk = "[DT] Found Disk ";
				string strInitDiskDriver = "[DT] Initializing Driver for Disk ";
				kprint(&strFoundDisk, size_of(strFoundDisk));
				kprintnl(devCount);
				kprint(&strInitDiskDriver, size_of(strInitDiskDriver));
				kprintnl(devCount);
			}
			uint driver = malloc(size_of(STOREDRV));
			STOREDRV.new(driver, device);

			if(DT_ENABLE_LOGS)
			{
				string strInitPTable = "[DT] Loading Partition Table from Disk ";
				kprint(&strInitPTable, size_of(strInitPTable));
				kprintnl(devCount);
			}
			uint p = malloc(size_of(PartitionTable));
			PartitionTable.new(p, driver);

			ll.Add(p);
			devCount++;
			device = ld.GetNextDevice();
		}
		if(DT_ENABLE_LOGS)
		{
			string strInitFinished = "[DT] Disk initialization Finished.";
			kprintl(&strInitFinished, size_of(strInitFinished));
		}
	}

	public uint GetDiskCount()
	{
		LinkedList l = this.m_List;
		uint c = l.Count();
		return c;
	}


	public uint GetPartitionTable(uint num)
	{
		LinkedList l = this.m_List;
		uint c = l.Get(num);
		return c;
	}

	public void Unload()
	{
		uint c = this.GetDiskCount();
		for(uint i = 0; i < c; i++)
		{
			PartitionTable pt = this.GetPartitionTable(i);
			pt.Unload();
		}
		LinkedList l = this.m_List;
		l.Clear();
		uint ll = l;
		free(ll);
		free(this);

	}

}