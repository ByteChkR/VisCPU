#include <../MemoryManagement/malloc.vhl>

public class LinkedList
{
	private uint m_Head;

	public static LinkedList()
	{
		this.m_Head = 0;
	}

	private uint IsEmpty()
	{
		uint e = this.m_Head;
		return e == 0;
	}

	private uint NextItem(uint prev)
	{
		LinkedListItem lli = prev;
		uint n = lli.Next;
		return n;
	}

	private uint CreateItem(uint data)
	{
		uint pp = malloc(size_of(LinkedListItem));
		LinkedListItem p = pp;
		
		p.Value = data;
		p.Next = 0;
		return p;
	}

	private void ReleaseItem(uint p)
	{
		free(p);
	}

	public uint Count()
	{
		uint r = 0;
		uint c = this.m_Head;
		while(c)
		{
			r++;
			c = this.NextItem(c);
		}
		return r;
	}

	public void Clear()
	{
		uint c = this.m_Head;
		while(c)
		{
			uint n = this.NextItem(c);
			this.ReleaseItem(c);
			c = n;
		}
	}

	public void Set(uint index, uint value)
	{
		uint c = this.m_Head;
		for(uint i = 0; i < index; i++)
		{
			if(!c)
			{
				//Throw out of bounds
				if(K_LINKED_LIST_INT_ON_ERROR)
				{
					string OoBStr = "The specified index is out of Bounds.";
					kprintl(&OoBStr, size_of(OoBStr));
					interrupt(1);
				}
				return 0;
			}
			

			c = this.NextItem(c);
		}

		LinkedListItem lli = c;
		lli.Value = value;
	}

	public uint Get(uint index)
	{
		uint c = this.m_Head;

		for(uint i = 0; i < index; i++)
		{
			if(!c)
			{
				//Throw out of bounds
				if(K_LINKED_LIST_INT_ON_ERROR)
				{
					string OoBStr = "The specified index is out of Bounds.";
					kprintl(&OoBStr, size_of(OoBStr));
					interrupt(1);
				}
				return 0;
			}
		
			c = this.NextItem(c);
		}

		LinkedListItem lli = c;


		uint v = lli.Value;

		return v;
	}

	public void Add(uint value)
	{
		uint i = this.Count();

		this.Insert(i, value);
	}

	public void Remove(uint value)
	{
		uint c = this.m_Head;
		uint l = 0;
		while(c)
		{
			uint n = this.NextItem(c);
			LinkedListItem item = c;
			uint v = item.Value;
			if(v == value)
			{
				if(l)
				{
					LinkedListItem prev = l;
					prev.Next = n;
				}
				else
				{
					this.m_Head = n;
				}
				this.ReleaseItem(c);
				return;
			}
			l = c;
			c = n;
		}
	}

	public void RemoveAll(uint value)
	{
		uint c = this.m_Head;
		uint l = 0;
		while(c)
		{
			uint n = this.NextItem(c);
			LinkedListItem item = c;
			uint v = item.Value;
			if(v == value)
			{
				if(l)
				{
					LinkedListItem prev = l;
					prev.Next = n;
				}
				else
				{
					this.m_Head = n;
				}
				this.ReleaseItem(c);
			}
			l = c;
			c = n;
		}
	}

	public void RemoveAt(uint index)
	{
		if(this.IsEmpty())
		{
			//Throw out of bounds
			if(K_LINKED_LIST_INT_ON_ERROR)
			{
				string OoBStr = "The specified index is out of Bounds.";
				kprintl(&OoBStr, size_of(OoBStr));
				interrupt(1);
			}
			return 0;
		}
	
		uint c = this.m_Head;
		uint last = 0;
		for(uint i = 0; i <= index; i++)
		{
			if(i == index)
			{
				LinkedListItem remItem = c;
				uint next = remItem.Next;
				this.ReleaseItem(c);
				if(i == 0)
				{
					this.m_Head = next;
				}
				else
				{
					LinkedListItem lst = last;
					lst.Next = next;
				}
				return;
			}

			last = c;
			c = this.NextItem(c);
			
			if(c == 0)
			{
				//Throw out of bounds
				if(K_LINKED_LIST_INT_ON_ERROR)
				{
					string OoBStr = "The specified index is out of Bounds.";
					kprintl(&OoBStr, size_of(OoBStr));
					interrupt(1);
				}
				return 0;
			}
		
		}
	}

	public void Insert(uint index, uint v)
	{
		if(this.IsEmpty())
		{
			
			if(index != 0)
			{
				//Throw out of bounds
				if(K_LINKED_LIST_INT_ON_ERROR)
				{
					string OoBStr = "The specified index is out of Bounds.";
					kprintl(&OoBStr, size_of(OoBStr));

					interrupt(1);
				}
				return 0;
			}
			
			uint ptr = this.CreateItem(v);
			this.m_Head = ptr;
			return;
		}
		else
		{
			uint c = this.m_Head;
			uint last = 0;
			for(uint i = 0; i <= index; i++)
			{
				if(i == index)
				{
					uint ptr = this.CreateItem(v);
					LinkedListItem item = ptr;
					item.Next = c;
					LinkedListItem lst = last;
					lst.Next = ptr;
					return;
				}

				last = c;
				c = this.NextItem(c);

				
				if(last == 0)
				{
					//Throw out of bounds
					if(K_LINKED_LIST_INT_ON_ERROR)
					{
						string OoBStr = "The specified index is out of Bounds.";
						kprintl(&OoBStr, size_of(OoBStr));
						interrupt(1);
					}
					return 0;
				}
				
			}
		}
	}

	public static void GetStructureSize()
	{
		return size_of(LinkedList);
	}
}


public class LinkedListItem
{
	public uint Next;
	public uint Value;
}

public static uint ll_new()
{
	uint p = malloc(size_of(LinkedList));
	LinkedList.new(p);
	return p;
}

public static void ll_insert(uint l, uint i, uint v)
{
	LinkedList ll = l;
	ll.Insert(i, v);
}

public static void ll_add(uint l, uint v)
{
	LinkedList ll = l;
	ll.Add(v);
}
public static void ll_set(uint l, uint i, uint v)
{
	LinkedList ll = l;
	ll.Set(i, v);
}

public static uint ll_get(uint l, uint i)
{
	LinkedList ll = l;
	uint c = ll.Get(i);
	return c;
}

public static uint ll_count(uint l)
{
	LinkedList ll = l;
	uint c = ll.Count();
	return c;
}

public static void ll_remove(uint l, uint v)
{
	LinkedList ll = l;
	ll.Remove(v);
}
public static void ll_removeat(uint l, uint i)
{
	LinkedList ll = l;
	ll.RemoveAt(i);
}
public static void ll_removeall(uint l, uint v)
{
	LinkedList ll = l;
	ll.RemoveAll(v);
}

public static void ll_clear(uint l)
{
	LinkedList ll = l;
	ll.Clear();
}