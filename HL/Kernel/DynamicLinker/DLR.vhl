#include "DLREntry.vhl"
//#include "DLRBinaryHelper.vhl"
#include "../Console.vhl"
#include "../Utils/LinkedList.vhl"
#include "../MemoryManagement/malloc.vhl"
#include "../DiskManagement/FileSystem/fs.vhl"
#include <../Settings/LoggingSettings.vhl>
#include <../Settings/KernelPaths.vhl>
#include <v3pic/v3pic.vhl>
private static string s_AppStartName = DLR_APP_START;


private static uint m_LoadedLibList;
private static uint dlr_initFlag;


public static void dlr_init()
{
	if(dlr_initFlag)
	{
		return;
	}
	uint ll = malloc(size_of(LinkedList));
	LinkedList.new(ll);
	m_LoadedLibList = ll;
	dlr_initFlag = 1;
}



private static uint dlr_has_lib_loaded(string libPath, uint libPathLen)
{
	LinkedList lll = m_LoadedLibList;

	for(uint i = 0; i < lll.Count(); i++)
	{
		DLREntry e = lll.Get(i);
		if(e.IsName(libPath, libPathLen))
		{
			uint eP = e;
			return eP;
		}
	}

	return 0;
}


public static void dlr_unload_lib(string libPath, uint libPathLen)
{
	if(DLR_ENABLE_LOGS)
	{
		string strDLRUnload = "[DLR] Trying to Unload Lib: ";
		kprint(&strDLRUnload, size_of(strDLRUnload));
		kprintl(libPath, libPathLen);
	}
	LinkedList lll = m_LoadedLibList;
	uint l = dlr_has_lib_loaded(libPath, libPathLen);
	if(l)
	{		
		
		DLREntry e = l;
		e.Dispose();
		lll.RemoveAll(l);

	}
}

public static void dlr_unload_all()
{
	LinkedList lll = m_LoadedLibList;

	uint c = lll.Count();

	for(uint i = 0; i < c; i++)
	{
		uint l = lll.Get(0);
		DLREntry e = l;
		if(DLR_ENABLE_LOGS)
		{
			string strDLRUnload = "[DLR] Unloading Binary: ";
			kprint(&strDLRUnload, size_of(strDLRUnload));
			kprintl(e.Name(), e.NameLength());
		}

		
		e.Dispose();

		lll.RemoveAt(0);
	}

	return 0;
}

//Resolves a Library.
//Initializes it OR uses Existing Loaded Library
public static uint dlr_load_lib(string libPath, uint libPathLen)
{
	
	uint l = dlr_has_lib_loaded(libPath, libPathLen);
	if(l)
	{
		return l;
	}
	else
	{
		if(DLR_ENABLE_LOGS)
		{
			string ldInfo = "[DLR] Loading Library: ";
			kprint(&ldInfo, size_of(ldInfo));
			kprintl(libPath, libPathLen);
		}
			
		uint lP = v3pic_load(libPath, libPathLen);
		uint eP = DLREntry.AllocateEntry(libPath, libPathLen, lP);
		
		DLREntry e = eP;

		LinkedList lll = m_LoadedLibList;
		lll.Add(eP);

		return eP;
	}
}

public static uint dlr_resolve_call(uint l, uint site, uint siteL)
{
	DLREntry e = l;
	uint ptr = e.LibPointer();
	uint p = v3pic_resolve_call(ptr, site, siteL);
	return p;
}

public static uint dlr_get_app_start(uint l)
{
	uint v = dlr_resolve_call(l, &s_AppStartName, size_of(s_AppStartName));
	return v;
}


public static void dlr_uninit()
{
	dlr_unload_all();
	free(m_LoadedLibList);
	dlr_initFlag = 0;
}