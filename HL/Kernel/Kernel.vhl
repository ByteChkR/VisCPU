
//Install Requirements

#include "DiskManagement/diskmgmnt.vhl"
#include "MemoryManagement/malloc.vhl"
#include "DiskManagement/FileSystem/fs.vhl"
#include "DynamicLinker/DLR.vhl"
#include "Memory/Memory.vhl"
#include "Console.vhl"

#include "Utils/ArgParser.vhl"
#include "Utils/String.vhl"

//Paths
#include <Settings/KernelPaths.vhl>

private static string s_StartupConfigPath = K_STARTUP_CONFIG;

private static uint s_KernelDiskTable;

private static uint kernel_find_char(uint f, uint c)
{
	uint r = 0;
	uint p = f_getpos(f);
	uint l = f_getsize(f);
	uint v = f_read(f);
	while(v != c && p < l)
	{
		r++;
		p++;
		v = f_read(f);
	}

	return r;
}

private static uint kernel_run_app(uint path, uint pathL, uint args, uint argc)
{
	string strRunApp = "[OS] Running App: ";
	kprint(&strRunApp, size_of(strRunApp));
	kprintl(path, pathL);
	
	uint app = dlr_load_lib(path, pathL);
	uint appStart = dlr_get_app_start(app);
	uint v = appStart(args, argc);
	dlr_unload_lib(path, pathL);
	return v;
}

public static void kernel_process_startup_events()
{

	string strStartupRun = "[OS] Running Startup Events...";
	kprintl(&strStartupRun, size_of(strStartupRun));
	uint startupConfig = 0;
	if(!fs_exists(&s_StartupConfigPath, size_of(s_StartupConfigPath)))
	{
		startupConfig = fs_create(&s_StartupConfigPath, size_of(s_StartupConfigPath));
	}
	else
	{
		startupConfig = fs_open(&s_StartupConfigPath, size_of(s_StartupConfigPath));
	}
	f_setpos(startupConfig, 0);

	
	uint lineLen = kernel_find_char(startupConfig, '\n');

	while(lineLen)
	{
		uint lineBuf = malloc(lineLen);
		
		uint start = f_getpos(startupConfig) - lineLen;
		start--;
		f_setpos(startupConfig, start);

		f_readbuf(startupConfig, lineBuf, lineLen);


		kernel_run_app(lineBuf, 
						lineLen, 
						lineBuf, 
						lineLen);


		free(lineBuf);

		lineLen = kernel_find_char(startupConfig, '\n');
	}

	fs_close(startupConfig);

}

public static void kernel_make_startup(uint s, uint l)
{
	uint f = 0;
	if(!fs_exists(&s_StartupConfigPath, size_of(s_StartupConfigPath)))
	{
		f = fs_create(&s_StartupConfigPath, size_of(s_StartupConfigPath));
	}
	else
	{
		f = fs_open(&s_StartupConfigPath, size_of(s_StartupConfigPath));
	}
	f_writebuf(f, s, l);
	f_write(f, '\n');
	fs_close(f);
}

public static void kernel_shutdown()
{

	string strKStart = "[Kernel] Shutdown Kernel...";
	kprintl(&strKStart, size_of(strKStart));
	fs_unload(0);

	DiskTable kdt = s_KernelDiskTable;

	kdt.Unload();

	dlr_uninit();

	fs_core_unload();

	mallocclear();
}

public static void kernel_init()
{
	string strKStart = "[Kernel] Starting Kernel...";
	kprintl(&strKStart, size_of(strKStart));
	fs_core_init();
	dlr_init();
	s_KernelDiskTable = malloc(size_of(DiskTable));
	DiskTable.new(s_KernelDiskTable);
	DiskTable dt = s_KernelDiskTable;
	PartitionTable pt0 = dt.GetPartitionTable(0);
	Partition pOS = pt0.GetPartition(0);
	Partition pData = pt0.GetPartition(1);
	fs_init(0, pData);
}
