
//Software Implementations
#include "Software/sw.vhl"

//Hardware API
#import "api-integration SIMD_HW_AddConstant"
#import "api-integration SIMD_HW_Add"
#import "api-integration SIMD_HW_SubConstant"
#import "api-integration SIMD_HW_Sub"
#import "api-integration SIMD_HW_MulConstant"
#import "api-integration SIMD_HW_Mul"
#import "api-integration SIMD_HW_DivConstant"
#import "api-integration SIMD_HW_Div"
#import "api-integration SIMD_HW_ModConstant"
#import "api-integration SIMD_HW_Mod"
#import "api-integration SIMD_HW_Set"
#import "api-integration SIMD_HW_Swap"
#import "api-integration SIMD_HW_Move"
#import "api-integration SIMD_HW_Copy"

private static uint s_Backend;

public class MemoryBackend
{
	public static uint Software()
	{
		return 0;
	}

	public static uint Hardware()
	{
		return 1;
	}
}

public static uint mem_get_backend_mode()
{
	return s_Backend;
}

public static uint mem_set_backend_mode(uint mode)
{
	s_Backend = mode;
}

public static void mem_add_const(uint a, uint c, uint r, uint l)
{
	if(mem_get_backend_mode() == MemoryBackend.Hardware())
	{
		SIMD_HW_AddConstant(a,c,r,l);
	}
	else
	{
		SIMD_SW.AddConstant(a,c,r,l);
	}
}

public static void mem_add(uint a, uint b, uint r, uint l)
{
	if(mem_get_backend_mode() == MemoryBackend.Hardware())
	{
		SIMD_HW_Add(a,b,r,l);
	}
	else
	{
		SIMD_SW.Add(a,b,r,l);
	}
}
public static void mem_sub_const(uint a, uint c, uint r, uint l)
{
	if(mem_get_backend_mode() == MemoryBackend.Hardware())
	{
		SIMD_HW_SubConstant(a,c,r,l);
	}
	else
	{
		SIMD_SW.SubConstant(a,c,r,l);
	}
}

public static void mem_sub(uint a, uint b, uint r, uint l)
{
	if(mem_get_backend_mode() == MemoryBackend.Hardware())
	{
		SIMD_HW_Sub(a,b,r,l);
	}
	else
	{
		SIMD_SW.Sub(a,b,r,l);
	}
}

public static void mem_mul_const(uint a, uint c, uint r, uint l)
{
	if(mem_get_backend_mode() == MemoryBackend.Hardware())
	{
		SIMD_HW_MulConstant(a,c,r,l);
	}
	else
	{
		SIMD_SW.MulConstant(a,c,r,l);
	}
}

public static void mem_mul(uint a, uint b, uint r, uint l)
{
	if(mem_get_backend_mode() == MemoryBackend.Hardware())
	{
		SIMD_HW_Mul(a,b,r,l);
	}
	else
	{
		SIMD_SW.Mul(a,b,r,l);
	}
}

public static void mem_div_const(uint a, uint c, uint r, uint l)
{
	if(mem_get_backend_mode() == MemoryBackend.Hardware())
	{
		SIMD_HW_DivConstant(a,c,r,l);
	}
	else
	{
		SIMD_SW.DivConstant(a,c,r,l);
	}
}

public static void mem_div(uint a, uint b, uint r, uint l)
{
	if(mem_get_backend_mode() == MemoryBackend.Hardware())
	{
		SIMD_HW_Div(a,b,r,l);
	}
	else
	{
		SIMD_SW.Div(a,b,r,l);
	}
}

public static void mem_mod_const(uint a, uint c, uint r, uint l)
{
	if(mem_get_backend_mode() == MemoryBackend.Hardware())
	{
		SIMD_HW_ModConstant(a,c,r,l);
	}
	else
	{
		SIMD_SW.ModConstant(a,c,r,l);
	}
}

public static void mem_mod(uint a, uint b, uint r, uint l)
{
	if(mem_get_backend_mode() == MemoryBackend.Hardware())
	{
		SIMD_HW_Mod(a,b,r,l);
	}
	else
	{
		SIMD_SW.Mod(a,b,r,l);
	}
}

public static void mem_set(uint a, uint v, uint l)
{
	if(mem_get_backend_mode() == MemoryBackend.Hardware())
	{
		SIMD_HW_Set(a,v,l);
	}
	else
	{
		SIMD_SW.Set(a,v,l);
	}
}

public static void mem_copy(uint a, uint v, uint l)
{
	if(mem_get_backend_mode() == MemoryBackend.Hardware())
	{
		SIMD_HW_Copy(a,v,l);
	}
	else
	{
		SIMD_SW.Copy(a,v,l);
	}
}

public static void mem_move(uint a, uint v, uint l)
{
	if(mem_get_backend_mode() == MemoryBackend.Hardware())
	{
		SIMD_HW_Move(a,v,l);
	}
	else
	{
		SIMD_SW.Move(a,v,l);
	}
}

public static void mem_swap(uint a, uint v, uint l)
{
	if(mem_get_backend_mode() == MemoryBackend.Hardware())
	{
		SIMD_HW_Swap(a,v,l);
	}
	else
	{
		SIMD_SW.Swap(a,v,l);
	}
}