#include "../Kernel.vhl"

#include "../DiskManagement/FileSystem/fs.vhl"
#include "../Console.vhl"
#include "../KernelLoader/kal.vhl"
#include <LibInjector.vhl>


//Settings
#include <../Settings/InstallerSettings.vhl>


//Setup Templates
#define INSTALLTARGET RAW
#define INSTALLER_HFS_PATHS(INSTALLTARGET)
{
	#include <../Settings/Install/INSTALLTARGET.vhl>
}
//Use Template to generate Setup Code.
INSTALLER_HFS_PATHS(INSTALLTARGET)


//Kernel Paths
private static string s_InstallLockFile = K_INSTALL_LOCK;

//Time Library Paths
private static string s_CoreLibTime = TIME_LIB_PATH;
private static string s_HFSLibTime = TIME_LIB_HFS;

//CFGLoader Library Paths
private static string s_CoreLibCFGLoader = CFG_LIB_PATH;
private static string s_HFSLibCFGLoader = CFG_LIB_HFS;
	
//Console Tools Library Paths
private static string s_CoreLibCTools = CTOOLS_LIB_PATH;
private static string s_HFSLibCTools = CTOOLS_LIB_HFS;

//Networking Library Paths
private static string s_CoreLibNet = NET_LIB_PATH;
private static string s_HFSLibNet = NET_LIB_HFS;

//DNS Library Paths
private static string s_CoreLibDNS = DNS_LIB_PATH;
private static string s_HFSLibDNS = DNS_LIB_HFS;

//Copy App Paths
private static string s_CoreAppDNSReg = DNS_REG_APP_PATH;
private static string s_HFSAppDNSReg = DNS_REG_APP_HFS;

//Copy App Paths
private static string s_CoreAppCopy = COPY_APP_PATH;
private static string s_HFSAppCopy = COPY_APP_HFS;

//Send App Paths
private static string s_CoreAppNetWrite = NETWRITE_APP_PATH;
private static string s_HFSAppNetWrite = NETWRITE_APP_HFS;

//Receive App Paths
private static string s_CoreAppNetEcho = NETECHO_APP_PATH;
private static string s_HFSAppNetEcho = NETECHO_APP_HFS;

//Move App Paths
private static string s_CoreAppMove = MOVE_APP_PATH;
private static string s_HFSAppMove = MOVE_APP_HFS;

private static string s_CoreAppDelete = DELETE_APP_PATH;
private static string s_HFSAppDelete = DELETE_APP_HFS;
	
private static string s_CoreAppConsole = CONSOLE_APP_PATH;
private static string s_HFSAppConsole = CONSOLE_APP_HFS;

private static string s_CoreAppAlias = ALIAS_APP_PATH;
private static string s_HFSAppAlias = ALIAS_APP_HFS;

private static string s_CoreAppKtools = KTOOLS_APP_PATH;
private static string s_HFSAppKtools = KTOOLS_APP_HFS;

private static string s_CoreAppEcho = ECHO_APP_PATH;
private static string s_HFSAppEcho = ECHO_APP_HFS;
		
private static string s_CoreAppClear = CLEAR_APP_PATH;
private static string s_HFSAppClear = CLEAR_APP_HFS;
	
private static string s_CoreAppKLoader = KLOADER_APP_PATH;
private static string s_HFSAppKLoader = KLOADER_APP_HFS;



public static uint kernel_install_default()
{
	if(fs_exists(&s_InstallLockFile, size_of(s_InstallLockFile)))
	{
		return 0; //Only if Lock file is missing
	}
	//Inject/Install Default Apps
	string strOSDL = "[INSTALL] Installing Default Libraries...";
	kprintl(&strOSDL, size_of(strOSDL));

	inj_hfs(s_CoreLibTime, s_HFSLibTime);

	inj_hfs(s_CoreLibCFGLoader, s_HFSLibCFGLoader);

	inj_hfs(s_CoreLibCTools, s_HFSLibCTools);

	inj_hfs(s_CoreLibNet, s_HFSLibNet);

	inj_hfs(s_CoreLibDNS, s_HFSLibDNS);

	string strOSDA = "[INSTALL] Installing Default Apps...";
	kprintl(&strOSDA, size_of(strOSDA));

	inj_hfs(s_CoreAppCopy, s_HFSAppCopy);

	inj_hfs(s_CoreAppMove, s_HFSAppMove);

	inj_hfs(s_CoreAppDelete, s_HFSAppDelete);

	inj_hfs(s_CoreAppConsole, s_HFSAppConsole);

	inj_hfs(s_CoreAppAlias, s_HFSAppAlias);

	inj_hfs(s_CoreAppKtools, s_HFSAppKtools);

	inj_hfs(s_CoreAppEcho, s_HFSAppEcho);

	inj_hfs(s_CoreAppClear, s_HFSAppClear);

	inj_hfs(s_CoreAppKLoader, s_HFSAppKLoader);

	inj_hfs(s_CoreAppNetEcho, s_HFSAppNetEcho);

	inj_hfs(s_CoreAppNetWrite, s_HFSAppNetWrite);
	
	inj_hfs(s_CoreAppDNSReg, s_HFSAppDNSReg);

	string strCreateConsoleStartup = "[INSTALL] Creating Console Startup Config..."
	kprintl(&strCreateConsoleStartup, size_of(strCreateConsoleStartup));
	string strTestScriptPath = CONSOLE_STARTUP_SCRIPT_PATH;
	string strTestScriptContent = "0:bin/alias.vbin add alias 0:bin/alias.vbin|0:bin/alias.vbin add dnsreg 0:bin/dnsreg.vbin|0:bin/alias.vbin add netwrite 0:bin/netwrite.vbin|0:bin/alias.vbin add netecho 0:bin/netecho.vbin|0:bin/alias.vbin add kloader 0:bin/kernelloader.vbin|0:bin/alias.vbin add echo 0:bin/echo.vbin|0:bin/alias.vbin add clear 0:bin/clear.vbin|0:bin/alias.vbin add ktools 0:bin/kerneltools.vbin|0:bin/alias.vbin add delete 0:bin/delete.vbin|0:bin/alias.vbin add move 0:bin/move.vbin|0:bin/alias.vbin add copy 0:bin/copy.vbin|";

	uint strTestScriptContentP = &strTestScriptContent;
	for(uint i = 0; i < size_of(strTestScriptContent); i++)
	{
		uint v = strTestScriptContentP[i];
		if(v == '|')
		{
			strTestScriptContentP[i] = '\n';
		}

	}
	uint testScript = fs_create(&strTestScriptPath, size_of(strTestScriptPath));
	f_writebuf(testScript, &strTestScriptContent, size_of(strTestScriptContent));
	fs_close(testScript);
	//Create Lock File
	uint f = fs_create(&s_InstallLockFile, size_of(s_InstallLockFile));
	fs_close(f);

	//Set Console as Default Startup App.
	string strCreateStartup = "[INSTALL] Creating Startup Entry...";
	kprintl(&strCreateStartup, size_of(strCreateStartup));
	kernel_make_startup(&s_CoreAppConsole, size_of(s_CoreAppConsole));
	
	return 1;
}
