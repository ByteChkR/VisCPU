#include <../System/System.vhl>
public class DLRBinaryHelper
{

	//Library Structure
	//	SymbolTableCount
	//	SymbolTableEntries
	//	...
	//	PIC Header and Table
	// 	...
	//	Binary

	//Gets the Binary Start of the Library
	public static uint GetBinaryStart(uint libPtr)
	{
		uint picStart = DLRBinaryHelper.GetPICStart(libPtr);
		uint picTableLen = picStart[2];
		return picStart + picTableLen+4;
	}

	//Returns the PIC Header Position
	public static uint GetPICStart(uint libPtr)
	{
		uint picStart = DLRBinaryHelper.GetSymbolEntry(libPtr, DLRBinaryHelper.GetSymbolEntryCount(libPtr));
		return picStart;
	}

	//Returns the Number of Symbols in the Table of the Library
	public static uint GetSymbolEntryCount(uint libPtr)
	{
		uint count = libPtr[0];
		return count;
	}

	//Get the Size of a Single Entry
	private static uint GetSymbolEntrySize(uint entryStart)
	{
		uint nameSize = entryStart[0];
		uint totalSize = nameSize + 2;
		return totalSize;
	}

	//Get the Position of the Entry at index.
	public static uint GetSymbolEntry(uint libPtr, uint index)
	{
		uint current = libPtr + 1;
		for(uint i = 0; i < index; i++)
		{
			uint sz = DLRBinaryHelper.GetSymbolEntrySize(current);
			current += sz;
		}
		return current;
	}

	//returns the pointer to the entry name
	public static uint GetSymbolEntryName(uint entryPtr)
	{
		uint nameStart = entryPtr+2;
		return nameStart;
	}

	//returns the size of the entry name
	public static uint GetSymbolEntryNameSize(uint entryPtr)
	{
		uint nameStart = entryPtr[0];
		return nameStart;
	}

	//returns the call site of the entry(the address of the function)
	public static uint GetSymbolEntrySite(uint entryPtr)
	{
		uint site = entryPtr[1];
		return site;
	}

	//Applies the correct offset for the current memory position
	//Running this function multiple times will corrupt the table
	public static void PatchSymbolTable(uint libPtr)
	{
		uint binaryOffset = DLRBinaryHelper.GetBinaryStart(libPtr);
		uint symCount = DLRBinaryHelper.GetSymbolEntryCount(libPtr);

		string bOffStr = "Binary Start Address: ";
		Console.Write(&bOffStr, size_of(bOffStr));
		Console.WriteNumberLine(binaryOffset);

		uint symStart = libPtr + 1;
		for(uint i = 0; i < symCount; i++)
		{
			uint siteName = DLRBinaryHelper.GetSymbolEntryName(symStart);
			uint siteNameSize = DLRBinaryHelper.GetSymbolEntryNameSize(symStart);
			string siteStr = "Patching Site: ";
			Console.Write(&siteStr, size_of(siteStr));
			Console.Write(siteName, siteNameSize);
			Console.WriteChar('-');
			Console.WriteChar('>');

			uint site = DLRBinaryHelper.GetSymbolEntrySite(symStart);
			uint newSite = site + binaryOffset;
			symStart[1] = newSite;
			Console.WriteNumberLine(newSite);
			symStart += DLRBinaryHelper.GetSymbolEntrySize(symStart);
		}
	}
	
	//Applies the correct offset for the current memory position
	//Running this function multiple times will corrupt the binary
	public static void PatchPICBinary(uint libPtr)
	{
		uint picStart = DLRBinaryHelper.GetPICStart(libPtr);
		uint binaryStart = DLRBinaryHelper.GetBinaryStart(libPtr);
		uint picSymbolCount = DLRBinaryHelper.GetSymbolEntryCount(libPtr);
		uint version = picStart[1]; //Read Version Byte (V1 = 1)


		string strBinaryVersion = "Binary Version: ";
		Console.Write(&strBinaryVersion, size_of(strBinaryVersion));
		Console.WriteNumberLine(version);

		if(version != 2)
		{
			string strUnsupportedVersion = "Unsupported Binary Version: ";
			Console.WriteLine(&strUnsupportedVersion, size_of(strUnsupportedVersion));
			Console.WriteNumberLine(version);
			interrupt(1);
			return 0;
		}

		uint listLength = picStart[2]; //Read List Length

		uint picTableStart = picStart + 4;

		string llStr = "Patch Index List Size: ";
		Console.Write(&llStr, size_of(llStr));
		Console.WriteNumberLine(listLength);


		for(uint i = 0; i < listLength; i++)
		{
			uint valIndex = picTableStart[i];
			uint val = binaryStart[valIndex];
			uint newVal = val + binaryStart;
			
			binaryStart[valIndex] = newVal;
		}
	}

}