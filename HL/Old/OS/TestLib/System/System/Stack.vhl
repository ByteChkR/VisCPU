#include "ExceptionHandler.vhl"
#include "StackEmptyException.vhl"
#include "StackOverflowException.vhl"

public class Stack
{
	private uint m_Ptr;
	private uint m_Len;
	private uint m_NextIdx;
	public static Stack(uint ptr, uint len)
	{
		this.m_NextIdx = 0;
		this.m_Ptr = ptr;
		this.m_Len = len;
	}

	public uint Count()
	{
		uint v = this.m_NextIdx;
		return v;
	}

	public uint Capacity()
	{
		uint v = this.m_Len;
		return v;
	}

	public uint Pop()
	{
		uint c = this.m_NextIdx;
		if(c == 0) //Check if Empty
		{
			ExceptionHandler.Throw(StackEmptyException());
			return 0;
		}

		c--;

		uint vp = this.m_Ptr;
		vp += c; //Position in Stack

		uint v = vp[0]; //Read
		vp[0] = 0;		//Reset
		this.m_NextIdx = c;	//Set new Length
		return v;		//Return Value
	}

	public void Push(uint v)
	{
		uint c = this.m_NextIdx;
		uint l = this.m_Len;
		if(c >= l) //Check if Full
		{
			ExceptionHandler.Throw(StackOverflowException());
			return 0;
		}

		uint vp = this.m_Ptr;
		vp += c;
		vp[0] = v;		//Write Data
		c++;
		this.m_NextIdx = c;	//Set new Length
	}
}