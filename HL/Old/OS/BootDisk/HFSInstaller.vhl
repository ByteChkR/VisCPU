#include "hfs/hfs.vhl"
#include "System/System.vhl"
#include "DiskTools.vhl"

public class HFSInstaller
{
	public static void StartInstall(RawAllocator al, DiskTable diskTable)
	{

		//Get First Detected Disks Partition Table
		PartitionTable pt = diskTable.GetPartitionTable(0);
		//Get Partitions
		Partition pBoot = pt.GetPartition(0);
		Partition pData = pt.GetPartition(1);

		//Display Boot Partition Info
		string pBootSMsg = "Boot Partition Start: ";
		string pBootLMsg = "Boot Partition Length: ";
		Console.Write(&pBootSMsg, size_of(pBootSMsg));
		Console.WriteNumberLine(pBoot.Start());
		Console.Write(&pBootLMsg, size_of(pBootLMsg));
		Console.WriteNumberLine(pBoot.GetSize());

		//Display Data Partition Info
		string pDataSMsg = "Data Partition Start: ";
		string pDataLMsg = "Data Partition Length: ";
		Console.Write(&pDataSMsg, size_of(pDataSMsg));
		Console.WriteNumberLine(pData.Start());
		Console.Write(&pDataLMsg, size_of(pDataLMsg));
		Console.WriteNumberLine(pData.GetSize());

		string pHFSPathInput = "Enter HFS Path(255 chars max): ";
		Console.Write(&pHFSPathInput, size_of(pHFSPathInput));

		uint ptr = al.Allocate(256);
		uint i = 0;
		while(i < 256)
		{
			uint v = Console.Read();
			if(v == '\n')
			{
				if(HFS.FileExists(ptr, i))
				{
					uint hfsS = HFS.GetFileSize(ptr, i);
					HFS.FileOpenRead(ptr, i);
					HFSInstaller.CopyFromHFS(pBoot, hfsS);
				}
				else
				{
					Console.WriteChar('\n');
					Console.Write(&pHFSPathInput, size_of(pHFSPathInput));
					i = 0;
					for(uint j = 0; j < 256; i++)
					{
						ptr[j] = 0;
					}
				}
			}
			ptr[i] = v;
			i++;
		}
		al.Free(ptr);

		//Check Allocator for memory Consumption
		al.WriteDebugData();
	}

	private static void CopyFromHFS(Partition pBoot, uint hfsLength)
	{
		DiskTools.Format(pBoot);

		string formatMsg = "Copy from HFS..";
		Console.WriteLine(&formatMsg, size_of(formatMsg));
		Console.WriteNumberLine(hfsLength);
		uint len = 4 + hfsLength;
		uint size = hfsLength;
		uint p = 0;
		uint pp = size / 100;
		string processMsg = "% Done...";

		for(uint i = 4; i < len; i++)
		{
			if(i % pp == 0)
			{
				Console.WriteNumber(p);
				Console.WriteLine(&processMsg, size_of(processMsg));
				p++;			
			}
			pBoot.Write(i, HFS.FileReadByte());
		}
		HFS.FileClose();

		DiskTools.MakeBootable(pBoot, hfsLength, 60000, 60000); //Load at 60000

		string finishedMsg = "Image Installed. You can now reboot the computer.";
		Console.WriteLine(&finishedMsg, size_of(finishedMsg));
		halt();
	}
}

