#include "System/System.vhl"
#include "DiskTools.vhl"
#include "HFSInstaller.vhl"
public class BootLoader
{
	public static void LoadBootImage(Partition pBoot)
	{
		uint imageLength = pBoot.Read(1);
		uint addrStart = pBoot.Read(2);
		uint entry = pBoot.Read(3);
		if(!imageLength)
		{
			string invalidImageLenMsg = "The Image has size 0. Can not boot with empty Image! Formatting Drive..";
			Console.WriteLine(&invalidImageLenMsg, size_of(invalidImageLenMsg));
			DiskTools.Format(pBoot);
			return;
		}

		if(!addrStart)
		{
			string invalidImageAddrMsg = "The Start Address is 0. Can not Load Image at address 0! Formatting Drive..";
			Console.WriteLine(&invalidImageAddrMsg, size_of(invalidImageAddrMsg));
			DiskTools.Format(pBoot);
			return;
		}

		if(entry < addrStart || entry >= (addrStart + imageLength))
		{
			string invalidImageEntryMsg = "The Entry Address is not valid. It has to point into the loaded image. Formatting Drive..";
			Console.WriteLine(&invalidImageEntryMsg, size_of(invalidImageEntryMsg));
			DiskTools.Format(pBoot);
			return;
		}

		pBoot.ReadBuffer(4, addrStart, imageLength);
		return entry;
	}

	public static void Load()
	{
		RawAllocator al = RawAllocator(100000, 1024);
		al.SetOptimizationLevel(2);

		//Detect and Load all Disks/Driver
		DiskTable diskTable = DiskTable(al);

		//Get First Detected Disks Partition Table
		PartitionTable pt = diskTable.GetPartitionTable(0);
		//Get Partitions
		Partition pBoot = pt.GetPartition(0);

		if(DiskTools.IsBootable(pBoot))
		{
			string yesMsg = "Bootable Device Found!";
			Console.WriteLine(&yesMsg, size_of(yesMsg));
			string loadImageMsg = "Loading Boot Image.."
			Console.WriteLine(&loadImageMsg, size_of(loadImageMsg));
			uint entry = BootLoader.LoadBootImage(pBoot);
			string imageEntryMsg = "Found Entry at ";
			Console.Write(&imageEntryMsg, size_of(imageEntryMsg));
			Console.WriteNumberLine(entry);

			uint alPtr = 100000;
			for(uint i = 0; i < 1024; i++)
			{
				alPtr[i] = 0;
			} //Cleanup

			entry(); //Invoke Entry Address
		}
		else
		{
			HFSInstaller.StartInstall(al, diskTable);
		}
	}
}