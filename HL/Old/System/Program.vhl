#include <System.vhl>
#include <Header/sys.vhl>
#include <Header/stdio.vhl>
#include <Header/stdmm.vhl>

#define WRITE_TOTAL 10000
#define WRITE_CREATE 5000

//Helper Function that formats the 
private void FormatData(uint dix, uint pix)
{
	DiskTable t = SystemCore.GetDiskTable();
	PartitionTable pt = t.GetPartitionTable(dix);
	Partition pData = pt.GetPartition(pix);

	uint ms = pData.GetSize();

	uint ptrSize = 1024*32;
	uint ptr = mallocs(ptrSize);
	for(uint i = 0; i < ptrSize; i++)
	{
		ptr[i] = 0;
	}

	for(uint i = 0; i < ms; i+= ptrSize)
	{
		uint left = (ms-i) -1;
		Console.WriteChar('.');
		if(left < ptrSize)
		{
			pData.WriteBuffer(ptr, i, left);
		}
		else
		{
			pData.WriteBuffer(ptr, i, ptrSize);
		}
	}

	free(ptr);
	Console.WriteChar('\n');
}

private void CreateTest()
{
	string sCreate = "Creating Test File...";
	Console.WriteLine(&sCreate, size_of(sCreate));

	//Create File
	FileStream s = fs.Create(&file, size_of(file));

	for(uint i = 0; i < WRITE_CREATE; i++)
	{
		s.Write(i); //Write something to allocate a block
	}

	//Close file to Release File Handle
	fs.Close(s);
}

private void OpenTest()
{
	string sOpen = "Opening Test File...";
	Console.WriteLine(&sOpen, size_of(sOpen));

	//Open File
	FileStream s = fs.Open(&file, size_of(file));

	string str_fsize = "File Size: ";
	uint fsize = s.GetSize();
	Console.Write(&str_fsize, size_of(str_fsize));
	Console.WriteNumberLine(fsize);

	//Write out File Content
	for(uint i = 0; i < fsize; i++)
	{
		//Console.WriteNumberLine(s.Read());
	}

	//Close file to Release File Handle
	fs.Close(s);
}

private void AppendTest()
{
	string sAppend = "Appending Test File...";
	Console.WriteLine(&sAppend, size_of(sAppend));

	FileStream s = fs.Open(&file, size_of(file));
	string str_fsize = "File Size: ";
	uint fsize = s.GetSize();

	Console.Write(&str_fsize, size_of(str_fsize));
	Console.WriteNumberLine(fsize);

	uint amount = WRITE_TOTAL - fsize;
	s.SetPosition(fsize);

	//Write Remaining data to get length == WRITE_TOTAL
	for(uint i = 0; i < amount; i++)
	{
		s.Write(i);
	}

	//Close file to Release File Handle
	fs.Close(s); //Close File
}

private void Main()
{
	//3 Cycle Program.
	//	1st Boot: Create File and Write 10 Numbers
	//	2nd Boot: Open File and Append 90 Numbers
	//	3rd Boot: Open File, Print Content and Reset Disk to Start State.

	//Use "fs" and "file" from root level.
	if(fs.Exists(&file, size_of(file)))
	{
		uint s = fs.GetSize(&file, size_of(file));

		if(s < WRITE_TOTAL) //Cycle 2
		{
			AppendTest();
		}
		else //Cycle 3
		{
			OpenTest();

			string sreset = "Deleting Test File..";
			Console.WriteLine(&sreset, size_of(sreset));

			fs.Delete(&file, size_of(file))
			//Format the 2nd Partition of the 1st disk
			//FormatData(0, 1);
		}
	}
	else //Cycle 1
	{
		CreateTest();
	}

}

//Initialize System Library. With Template from sys.vhl
sysinit();

FormatData(0, 1);


//Create File System Wrapper Function for File System Class
create_fsysinit(FileSystem) //Note: no semicolon because this is a function that gets inlined into this script

//Use the File System Wrapper Function to Create the File System.
//0: File System Class Name
//1: Disk ID
//2: Partition ID
FileSystem fs = fsinit(FileSystem, 0, 1);

//Test Data
string file = "test.txt";
//Enter Program Main Code
//Main();

private void CreateFiles(uint num, uint len)
{
	string strFileName = "test_XXXX.txt";
	uint strNum = (&strFileName) + 5;
	for(uint i = 0; i < num; i++)
	{
		Convert.ToString(i, 10, strNum);
		Console.WriteLine(&strFileName, size_of(strFileName));
		FileStream s = fs.Create(&strFileName, size_of(strFileName));
		for(uint j = 0; j < len; j++)
		{
			s.Write(j);
		}
		fs.Close(s);
	}
}

private void DeleteFiles(uint num, uint len)
{
	string strFileName = "test_XXXX.txt";
	uint strNum = (&strFileName) + 5;
	for(uint i = 0; i < num; i++)
	{
		Convert.ToString(i, 10, strNum);
		Console.WriteLine(&strFileName, size_of(strFileName));
		fs.Delete(&strFileName, size_of(strFileName));
	}
}
Main();
fs.WriteInfo();