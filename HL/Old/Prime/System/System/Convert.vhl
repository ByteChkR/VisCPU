private static string NUM_CHARS = "0123456789abcdef";
private static uint PARSE_BUF[30];

public class Convert
{
	private static void Copy(uint src, uint len, uint dst)
	{
		for(uint i = 0; i < len; i++)
		{
			uint v = src[i];
			dst[i] = v;
		}
	}

	public static uint ToString(uint value, uint baseSystem, uint ptr)
	{
		if(!value)
		{
			ptr[0] = '0';
			return 1;
		}

		uint start = size_of(PARSE_BUF);
		while(value && start)
		{
			start--;
			uint idx = value % baseSystem;

			uint tempPtr = &NUM_CHARS;
			uint chr = tempPtr[idx];

			PARSE_BUF[start] = chr;
			value /= baseSystem;
			if(!value)
			{
				start++;
			}
		}
		uint size = size_of(PARSE_BUF);
		uint read = size- start-1;
		if(value)
		{
			read = size;
		}

		Convert.Copy(&PARSE_BUF + start-1, read, ptr); 

		return read;
	}

	public static uint ParseNumber(uint ptr, uint len)
	{
		uint i = len;
		uint charOffset = 0x30;
		uint charMax = 0x39;
		uint result = 0;
		uint position = 1;
		uint mul = 10;
		while(i)
		{
			i--;

			uint rawValue = ptr[i];
			if(rawValue < charOffset)
			{
				interrupt(1);
				//_ERROR_T(&STR_PARSE_INVALID_INPUT_L, size_of(STR_PARSE_INVALID_INPUT_L));
			}
			if(rawValue > charMax)
			{
				interrupt(1);
				//_ERROR_T(&STR_PARSE_INVALID_INPUT_H, size_of(STR_PARSE_INVALID_INPUT_H));
			}
			uint current = rawValue - charOffset;
		
			result += current * position;
			position *= mul;
		}
		return result;
	}
}
