
//Software Implementations
#include "Software/sw.vhl"

//Hardware API
#import "api-integration SIMD_HW_AddConstant"
#import "api-integration SIMD_HW_Add"
#import "api-integration SIMD_HW_SubConstant"
#import "api-integration SIMD_HW_Sub"
#import "api-integration SIMD_HW_MulConstant"
#import "api-integration SIMD_HW_Mul"
#import "api-integration SIMD_HW_DivConstant"
#import "api-integration SIMD_HW_Div"
#import "api-integration SIMD_HW_ModConstant"
#import "api-integration SIMD_HW_Mod"
#import "api-integration SIMD_HW_Set"
#import "api-integration SIMD_HW_Swap"
#import "api-integration SIMD_HW_Move"
#import "api-integration SIMD_HW_Copy"

public class SIMDBackend
{
	public static uint Software()
	{
		return 0;
	}

	public static uint Hardware()
	{
		return 1;
	}
}

public class SIMD
{
	private static uint s_Backend;
	public static uint BackendMode()
	{
		return SIMD.s_Backend;
	}


	public static void Initialize(uint mode)
	{
		SIMD.s_Backend = mode;
	}

	public static void AddConstant(uint a, uint c, uint r, uint l)
	{
		if(SIMD.BackendMode() == SIMDBackend.Hardware())
		{
			SIMD_HW_AddConstant(a,c,r,l);
		}
		else
		{
			SIMD_SW.AddConstant(a,c,r,l);
		}
	}

	public static void Add(uint a, uint b, uint r, uint l)
	{
		if(SIMD.BackendMode() == SIMDBackend.Hardware())
		{
			SIMD_HW_Add(a,b,r,l);
		}
		else
		{
			SIMD_SW.Add(a,b,r,l);
		}
	}

	public static void SubConstant(uint a, uint c, uint r, uint l)
	{
		if(SIMD.BackendMode() == SIMDBackend.Hardware())
		{
			SIMD_HW_SubConstant(a,c,r,l);
		}
		else
		{
			SIMD_SW.SubConstant(a,c,r,l);
		}
	}

	public static void Sub(uint a, uint b, uint r, uint l)
	{
		if(SIMD.BackendMode() == SIMDBackend.Hardware())
		{
			SIMD_HW_Sub(a,b,r,l);
		}
		else
		{
			SIMD_SW.Sub(a,b,r,l);
		}
	}

	public static void MulConstant(uint a, uint c, uint r, uint l)
	{
		if(SIMD.BackendMode() == SIMDBackend.Hardware())
		{
			SIMD_HW_MulConstant(a,c,r,l);
		}
		else
		{
			SIMD_SW.MulConstant(a,c,r,l);
		}
	}

	public static void Mul(uint a, uint b, uint r, uint l)
	{
		if(SIMD.BackendMode() == SIMDBackend.Hardware())
		{
			SIMD_HW_Mul(a,b,r,l);
		}
		else
		{
			SIMD_SW.Mul(a,b,r,l);
		}
	}

	public static void DivConstant(uint a, uint c, uint r, uint l)
	{
		if(SIMD.BackendMode() == SIMDBackend.Hardware())
		{
			SIMD_HW_DivConstant(a,c,r,l);
		}
		else
		{
			SIMD_SW.DivConstant(a,c,r,l);
		}
	}

	public static void Div(uint a, uint b, uint r, uint l)
	{
		if(SIMD.BackendMode() == SIMDBackend.Hardware())
		{
			SIMD_HW_Div(a,b,r,l);
		}
		else
		{
			SIMD_SW.Div(a,b,r,l);
		}
	}

	public static void ModConstant(uint a, uint c, uint r, uint l)
	{
		if(SIMD.BackendMode() == SIMDBackend.Hardware())
		{
			SIMD_HW_ModConstant(a,c,r,l);
		}
		else
		{
			SIMD_SW.ModConstant(a,c,r,l);
		}
	}

	public static void Mod(uint a, uint b, uint r, uint l)
	{
		if(SIMD.BackendMode() == SIMDBackend.Hardware())
		{
			SIMD_HW_Mod(a,b,r,l);
		}
		else
		{
			SIMD_SW.Mod(a,b,r,l);
		}
	}

	public static void Set(uint a, uint v, uint l)
	{
		if(SIMD.BackendMode() == SIMDBackend.Hardware())
		{
			SIMD_HW_Set(a,v,l);
		}
		else
		{
			SIMD_SW.Set(a,v,l);
		}
	}

	public static void Copy(uint a, uint v, uint l)
	{
		if(SIMD.BackendMode() == SIMDBackend.Hardware())
		{
			SIMD_HW_Copy(a,v,l);
		}
		else
		{
			SIMD_SW.Copy(a,v,l);
		}
	}

	public static void Move(uint a, uint v, uint l)
	{
		if(SIMD.BackendMode() == SIMDBackend.Hardware())
		{
			SIMD_HW_Move(a,v,l);
		}
		else
		{
			SIMD_SW.Move(a,v,l);
		}
	}

	public static void Swap(uint a, uint v, uint l)
	{
		if(SIMD.BackendMode() == SIMDBackend.Hardware())
		{
			SIMD_HW_Swap(a,v,l);
		}
		else
		{
			SIMD_SW.Swap(a,v,l);
		}
	}
}