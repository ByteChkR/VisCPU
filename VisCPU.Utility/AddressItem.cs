using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Runtime.CompilerServices;

using VisCPU.Utility.Events;
using VisCPU.Utility.Logging;

namespace VisCPU.Utility
{
    public class UriResolverFailureEvent:ErrorEvent
    {

        private const string EVENT_KEY = "uri-resolver-failure";
        public UriResolverFailureEvent( string uri ) : base( $"Can not resolve uri '{uri}'", EVENT_KEY, true )
        {
        }

    }
    public abstract class UriResolver : VisBase
    {
        public static string GetFilePath(string tempPath, string uri)
        {

            UriResolver r = GetResolver(tempPath, uri);

            if ( r != null )
                return r.GetFilePath( uri );
            return null;
        }
        
        public static void Resolve(string tempPath, string uri)
        {
            UriResolver r = GetResolver( tempPath, uri );

            if ( r != null )
            {
                r.Resolve(uri);
            }
        }

        private static UriResolver GetResolver( string tempPath, string uri )
        {
            List<UriResolver> resolvers = new List<UriResolver> { new HttpUriResolver(tempPath) };
            UriResolver r = resolvers.FirstOrDefault(x => x.CanResolve(uri));
            if (r != null)
            {
                return r;
            }
            return null;
        }

        protected override LoggerSystems SubSystem => LoggerSystems.UriResolver;

        protected abstract bool CanResolve(string uri);
        protected abstract string Resolve(string uri);
        protected abstract string GetFilePath(string uri);

    }

    public class HttpUriResolver : UriResolver
    {

        private readonly string tempPath;
        public HttpUriResolver(string tempPath)
        {
            this.tempPath = tempPath;
        }
        private readonly WebClient client = new WebClient();

        protected override bool CanResolve(string uri)
        {
            if (Uri.TryCreate(uri, UriKind.Absolute, out Uri u))
            {
                return u.Scheme == "http" || u.Scheme == "https";
            }

            return false;
        }

        protected override string Resolve( string uri )
        {
            string dst = GetFilePath(uri);
            Directory.CreateDirectory(tempPath);
            Log($"Resolving File: {uri} => {dst}");
            client.DownloadFile(uri, dst);
            return dst;
        }

        protected override string GetFilePath(string uri)
        {
            string name = Path.GetFileName(uri);
            return Path.Combine(tempPath, name);
        }

    }

    public struct AddressItem
    {

        public bool AutoGenerated => LinkerArguments.Contains("linker:autogen");

        public bool Hide => LinkerArguments.Contains("linker:hide");

        public uint Address;
        public object[] LinkerArguments;

        public AddressItem Offset(uint off)
        {
            return new AddressItem
            {
                Address = Address + off,
                LinkerArguments = LinkerArguments
            };
        }

    }
}